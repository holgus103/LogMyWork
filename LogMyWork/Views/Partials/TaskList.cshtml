@using LogMyWork.Models
@using LogMyWork.Consts
@model List<ProjectTask>

@{
    TimeEntry timeEntry = (TimeEntry)Session[SessionKeys.CurrentTimeEntry];
    Role currentProjectRole = (Role)this.ViewData[ViewDataKeys.CurrentProjectRole];
}
<table class="table" id="TaskTable">
    <tr>
        <th>
            @Html.DisplayNameFor(model => model[0].Name)
        </th>
        <th></th>
    </tr>
    @foreach (var task in Model)
    {
        <tr>
            <td>
                @Html.DisplayFor(model => task.Name)
            </td>
            <td>
                @Html.Label(timeEntry != null && timeEntry.ParentTaskID == task.TaskID ? "Stop" : "Track", new { onClick = "createTimeEntry($(this))", taskId = task.TaskID }) |
                @Html.ActionLink("Edit", "Edit", "Tasks", new { id = task.TaskID }, null) |
                @Html.ActionLink("Details", "Details", "Tasks", new { id = task.TaskID }, null) |
                @Html.ActionLink("Delete", "Delete", "Tasks", new { id = task.TaskID }, null) 
                @if(task.Status == TaskStatus.InProgress || task.Status == TaskStatus.CurrentlyInProgress )
                {
                    @(" | ")
                    @Html.Label("Submit for feedback", new { taskID = task.TaskID, status = TaskStatus.AwaitingFeedback })
                }
                else
                {
                    if (task.Status == TaskStatus.AwaitingFeedback && currentProjectRole != Role.Worker)
                    {
                        @(" | ")
                        @Html.Label("Close", new { taskID = task.TaskID, status = TaskStatus.Finished })
                        @(" | ")
                        @Html.Label("Reopen", new {taskID = task.TaskID, status = TaskStatus.Assigned })
                    }
                }
            </td>
        </tr>
    }
</table>